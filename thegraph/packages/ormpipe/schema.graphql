
## ===== ormp relayer
type OrmpRelayerAssigned @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  fee: BigInt! # uint256
  params: Bytes! # bytes
  proof: [Bytes!]! # bytes32[32]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  seq: BigInt!
}

type OrmpRelayerSetApproved @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  approve: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpRelayerSetDstConfig @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  baseGas: BigInt! # uint64
  gasPerByte: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpRelayerSetDstPrice @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  dstPriceRatio: BigInt! # uint128
  dstGasPriceInWei: BigInt! # uint128
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

## ========== ormp protocol
type OrmpProtocolAppConfigUpdated @entity(immutable: true) {
  id: Bytes!
  ua: Bytes! # address
  oracle: Bytes! # address
  relayer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolMessageAccepted @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  root: Bytes! # bytes32
  message_channel: Bytes! # address
  message_index: BigInt! # uint256
  message_fromChainId: BigInt! # uint256
  message_from: Bytes! # address
  message_toChainId: BigInt! # uint256
  message_to: Bytes! # address
  message_gasLimit: BigInt! # uint256
  message_encoded: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  # ---- oracle
  oracleAssigned: Boolean
  oracleAssignedFee: BigInt

  # ---- relayer
  relayerAssigned: Boolean
  relayerAssignedFee: BigInt # uint256
  relayerAssignedParams: Bytes # bytes
  relayerAssignedProof: [Bytes!] # bytes32[32]
}

type OrmpProtocolMessageDispatched @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  dispatchResult: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolSetDefaultConfig @entity(immutable: true) {
  id: Bytes!
  oracle: Bytes! # address
  relayer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==
type SubapiAddBeacon @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  beaconId: Bytes! # bytes32
  beacon_chainId: BigInt! # uint256
  beacon_airnode: Bytes! # address
  beacon_endpointId: Bytes! # bytes32
  beacon_sponsor: Bytes! # address
  beacon_sponsorWallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiAggregatedORMPData @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  ormpData_count: BigInt! # uint256
  ormpData_root: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiAirnodeRrpCompleted @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  requestId: Bytes! # bytes32
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiAirnodeRrpRequested @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  beaconId: Bytes! # bytes32
  requestId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiOwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiRemoveBeacon @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  beaconId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiSetFee @entity(immutable: true) {
  id: Bytes!
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubapiSubAPIFeedUpdated @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  msgRoot_count: BigInt! # uint256
  msgRoot_root: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ====== oracle v2
type OrmpOracleAssigned @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  seq: BigInt!
}

type OrmpOracleImportedMessageRoot @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  messageRoot: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpOracleSetApproved @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  approve: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpOracleSetFee @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
