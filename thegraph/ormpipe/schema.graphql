## === subapi

type AddBeacon @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  beacon_airnode: Bytes! # address
  beacon_endpointId: Bytes! # bytes32
  beacon_sponsor: Bytes! # address
  beacon_sponsorWallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AggregatedORMPData @entity(immutable: true) {
  id: Bytes!
  ormpData_count: BigInt! # uint256
  ormpData_root: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AirnodeRrpCompleted @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  requestId: Bytes! # bytes32
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AirnodeRrpRequested @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  requestId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveBeacon @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubAPIFeedUpdated @entity(immutable: true) {
  id: Bytes!
  beaconId: Bytes! # bytes32
  msgRoot_count: BigInt! # uint256
  msgRoot_root: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

## ========== ormp protocol
type OrmpProtocolAppConfigUpdated @entity(immutable: true) {
  id: Bytes!
  ua: Bytes! # address
  oracle: Bytes! # address
  relayer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolClearFailedMessage @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolMessageAccepted @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  root: Bytes! # bytes32
  message_channel: Bytes! # address
  message_index: BigInt! # uint256
  message_fromChainId: BigInt! # uint256
  message_from: Bytes! # address
  message_toChainId: BigInt! # uint256
  message_to: Bytes! # address
  message_encoded: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolMessageDispatched @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  dispatchResult: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolRetryFailedMessage @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  dispatchResult: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrmpProtocolSetDefaultConfig @entity(immutable: true) {
  id: Bytes!
  oracle: Bytes! # address
  relayer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
