enum OrderStatus {
  Finished
  InProgress
}

enum RelayerRole {
  Assigned
  Delivery
  Confirmation
}

type AmountIndex @jsonField {
  amount: String # !! don't use BigInt in @jsonField
  blockTime: Date
  blockNumber: Int
  extrinsicIndex: Int
  eventIndex: Int
}

type OrderOutOfSlotBclok @jsonField {
  orderId: String
  outOfSlotBlock: Int
}

type QuoteHistory @entity {
  id: ID! # relayerId

  relayer: Relayer
  data: [AmountIndex]
}

type FeeHistory @entity {
  id: ID! # marketId

  market: Market
  data: [AmountIndex]
  lastTime: Int # block number
}

type Reward @entity {
  id: ID! # blockNumber-eventIndex-customIndex

  order: Order
  market: Market
  relayer: Relayer

  blockTime: Date
  blockNumber: Int
  extrinsicIndex: Int
  eventIndex: Int

  amount: BigInt
  relayerRole: RelayerRole
}

type Slash @entity {
  id: ID! # blockNumber-eventIndex-customIndex

  order: Order
  market: Market
  relayer: Relayer

  blockTime: Date
  blockNumber: Int
  extrinsicIndex: Int
  eventIndex: Int

  amount: BigInt
  relayerRole: RelayerRole

  sentTime: Int # block number
  confirmTime: Int # block number
  delayTime: Int # number of blocks
}

type Market @entity {
  id: ID! # destination

  totalOrders: Int
  totalSlash: BigInt
  totalReward: BigInt

  averageSpeed: Int # millisecond
  unfinishedOrders: [OrderOutOfSlotBclok] # real time

  finishedOrders: Int # real time
  unfinishedInSlotOrders: Int # real time
  unfinishedOutOfSlotOrders: Int # real time

  orders: [Order] @derivedFrom(field: "market")
  slashes: [Slash] @derivedFrom(field: "market")
  rewards: [Reward] @derivedFrom(field: "market")
  relayers: [Relayer] @derivedFrom(field: "market")
  feeHistory: [FeeHistory] @derivedFrom(field: "market")
}

type Relayer @entity {
  id: ID! # destination-address

  market: Market
  address: String

  totalOrders: Int
  totalSlashes: BigInt
  totalRewards: BigInt
  totalOrdersId: [String]

  assigned1Orders: [Order] @derivedFrom(field: "assignedRelayer1")
  assigned2Orders: [Order] @derivedFrom(field: "assignedRelayer2")
  assigned3Orders: [Order] @derivedFrom(field: "assignedRelayer3")
  deliveryOrders: [Order] @derivedFrom(field: "deliveryRelayer")
  confirmationOrders: [Order] @derivedFrom(field: "confirmationRelayer")

  slashes: [Slash] @derivedFrom(field: "relayer")
  rewards: [Reward] @derivedFrom(field: "relayer")
  quoteHistory: [QuoteHistory] @derivedFrom(field: "relayer")
}

type Order @entity {
  id: ID! # destination-lane-nonce

  lane: String
  nonce: String
  market: Market

  sender: String
  sourceTxHash: String

  fee: BigInt
  status: OrderStatus

  slotTime: Int # number of blocks
  outOfSlotBlock: Int # block number
  slotIndex: Int # -1: out of slot / 0: #1 / 1: #2 / 2: #3

  createBlockTime: Date
  createBlockNumber: Int
  createExtrinsicIndex: Int
  createEventIndex: Int

  finishBlockTime: Date
  finishBlockNumber: Int
  finishExtrinsicIndex: Int
  finishEventIndex: Int

  treasuryAmount: BigInt
  assignedRelayers: [String]

  assignedRelayer1: Relayer
  assignedRelayer2: Relayer
  assignedRelayer3: Relayer
  deliveryRelayer: Relayer
  confirmationRelayer: Relayer

  slashes: [Slash] @derivedFrom(field: "order")
  rewards: [Reward] @derivedFrom(field: "order")
}
